
server.port=8800

#logging.level.root=info
#logging.level.root=ERROR

spring.boot.admin.client.url=http://localhost:9999
logging.file.path=./logs
spring.mail.host=
management.endpoints.web.exposure.include=*

#management.info.env.enabled=true

# ======== mysql ========
# 数据库驱动
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
# 数据源名称
spring.datasource.name=defaultDataSource
# 数据库连接地址
spring.datasource.url=jdbc:mysql://localhost:3306/bili?serverTimezone=UTC
# 数据库用户名&密码
spring.datasource.username={username}
spring.datasource.password={password}
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
##### StatViewServlet配置 #######
#启用内置的监控页面
spring.datasource.druid.stat-view-servlet.enabled=true
#内置监控页面的地址
spring.datasource.druid.stat-view-servlet.url-pattern=/druid/*
#关闭 Reset All 功能
spring.datasource.druid.stat-view-servlet.reset-enable=false
#设置登录用户名
spring.datasource.druid.stat-view-servlet.login-username=admin
#设置登录密码
spring.datasource.druid.stat-view-servlet.login-password=admin
#白名单（如果allow没有配置或者为空，则允许所有访问）
spring.datasource.druid.stat-view-servlet.allow=127.0.0.1
#黑名单（deny优先于allow，如果在deny列表中，就算在allow列表中，也会被拒绝）
spring.datasource.druid.stat-view-servlet.deny=
#### WebStatFilter配置 #######
#启用StatFilter
spring.datasource.druid.web-stat-filter.enabled=true
#添加过滤规则
spring.datasource.druid.web-stat-filter.url-pattern=/*
#排除一些不必要的url
spring.datasource.druid.web-stat-filter.exclusions=*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*
#开启session统计功能
spring.datasource.druid.web-stat-filter.session-stat-enable=true
# https://blog.csdn.net/yuanpanni/article/details/99097205
spring.datasource.druid.filter.stat.log-slow-sql=true
spring.datasource.druid.filter.stat.slow-sql-millis=1000
spring.datasource.druid.filter.stat.enabled=true
spring.datasource.druid.filter.stat.db-type=mysql
spring.datasource.druid.filter.stat.merge-sql=true
##缺省sessionStatMaxCount是1000个
#spring.datasource.druid.web-stat-filter.session-stat-max-count=1000
##spring.datasource.druid.web-stat-filter.principal-session-name=
##spring.datasource.druid.web-stat-filter.principal-cookie-name=
##spring.datasource.druid.web-stat-filter.profile-enable=

# ========  mybatis ========
mybatis-plus.type-aliases-package=top.xuanweiace.bili.dao
mybatis-plus.mapper-locations=classpath*:mapper/*Dao.xml
#mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl
mybatis-plus.configuration.log-impl=org.apache.ibatis.logging.nologging.NoLoggingImpl
#mybatis-plus.mapper-locations=classpath:/mapper/*Mapper.xml
# 将DO驼峰的字段与数据库下划线的字段一一映射
mybatis-plus.configuration.map-underscore-to-camel-case=true
# 表以下划线分割
mybatis-plus.global-config.db-config.table-underline=true
mybatis-plus.configuration.cache-enabled=false
mybatis-plus.configuration.jdbc-type-for-null=null
mybatis-plus.configuration.use-generated-keys=true
# 调试模式
logging.level.com.baomidou.mybatisplus.mapper=DEBUG

# ======== bilibili爬取 业务相关 ========

bili.user-cookie={在任意B站域名下请求的结构体}
bili.number-of-videos-fetched-perMinute = 100
# 视频历史记录接口，每次最多可以返回的视频数量
bili.maximum-number-of-videos-fetched-once = 300
# 每次启动之前都需要获取新的
bili.ac_time_value = {在local storage里的ac_time_value字段中}


# ======== 飞书接口 业务相关 ========

# 记住不需要加括号
lark.webhook = {自己申请}
lark.appid ={}
lark.appsecret ={}